#+begin_src emacs-lisp :tangle org-cthulhu.el
(require 'cl-lib)
(require 'dash)
(require 'org-ml)
#+end_src

#+RESULTS:
: org-ml

* TODO Pistes d'amélioration
** Manipulation des personnages

- [X] ~cthulhu-select-set-carac~ devrait indiquer dans le minibuffer ce qu'il a fait

** Gestion de l'inventaire d'un personnage

- [ ] obtenir la liste des objets
- [X] ajouter un objet
- [ ] retirer un objet
- [ ] transférer un objet

** Système de jeu 

NE PAS IMPLÉMENTER DE SYSTÈME POUR LES ROLLS.
Implémenter un système pour demander quels rolls faire (les rolls c'est ça qui est drôle...).


- [ ] gestion des caractéristiques modifiables :
  - [ ] rajouter une section "hidden" aux tables :
    - santé mentale max, chance max, pdv max etc.
    - états folies etc 
    - attaques (défaut 1), coups rendus (défaut 0)
  - [ ] santé mentale : folie temporaire/permanente etc
  - [ ] chance 
- [-] gestion des combats
  - [X] initialiser un tableau de combat
    - [X] récupérer les attaquants par ordre de DEX
    - [X] import des compétences intéressante
  - [X] attaques au corps à corps en combat
  - [ ] folie dans un combat
  - [ ] nouveau round et mise à jour de certaines cases
  - [ ] attaques à distance
    - [ ] dégâts
    - [ ] panne pour arme

** Améliorations diverses

- [ ] Détecter les personnages (tag "personnage") dans un entête de niveau >= 2
- [X] améliorer les requêtes à ~get-carac~ : c'est long parce qu'on parse tout le buffer à chaque fois, de multiples fois.
- [-] créer un minor mode...
  - [X] continuer le renommage
  - [ ] mettre tout l'import des tables dans une seule fonction
    
  
** Latex

- [ ] trouver quoi mettre au recto du lifetracker
  un récapitulatif de certaines règles ?
  - combat
  - dé malus/bonus, tests de santé mentale etc



* Minor mode

#+begin_src emacs-lisp
(define-minor-mode org-cthulhu-mode
  "Starts off a minor mode for handling Call of Cthulhu
scenarios. "
  :init-value nil
  :lighter " Org-cthulhu"
  :after-hook (if org-fragtog-mode
                  (add-hook 'after-save-hook 'cthulhu-personnages-liste-update nil t)
                (remove-hook 'after-save-hook 'cthulhu-personnages-liste-update t)))

(defvar-local cthulhu-personnages-liste nil)
#+end_src

#+RESULTS:
: cthulhu-personnages-liste

#+begin_src emacs-lisp
(defconst cthulhu-sections
  '("Objets"
   "Personnages"
   "Monstres"
   "Lieux"
   "Événements"
   "Documentation"))
#+end_src

#+RESULTS:
: cthulhu-sections


* Import des personnages 

#+begin_src emacs-lisp
(defun get-tagged-subtree (taglist)
  "Détermine la liste les enfants des nœuds dont la liste des tags est taglist "
  (apply #'-concat (-map #'org-ml-get-children 
 (--filter (eq (org-ml-get-type it) 'headline) (org-ml-match '((:tags taglist)) (org-ml-parse-subtrees 'all))))))
#+end_src

#+RESULTS:
: get-tagged-subtree

#+begin_src emacs-lisp :tangle org-cthulhu.el
(defun get-name (personnage)
  (org-ml-get-property :raw-value personnage))

(defun get-characters-name ()
  (--map (get-name it) cthulhu-personnages-liste))
#+end_src

#+RESULTS:
: get-characters-name

#+begin_src emacs-lisp
;; (get-characters-name)
;; (get-name (cthulhu-select-character))
#+end_src

#+RESULTS:

#+begin_src emacs-lisp
(defun cthulhu-personnages-liste-update ()
    (setq cthulhu-personnages-liste (--filter (eq (org-ml-get-type it) 'headline)
                                              (get-tagged-subtree '("personnage")))))


;; https://github.com/10sr/switch-buffer-functions-el/pull/7
;;(add-to-list window-buffer-change-functions 'cthulhu-personnages-liste-update)
#+end_src

#+RESULTS:
: cthulhu-personnages-liste-update

* Ajout de sous-sections

#+begin_src emacs-lisp
(defun get-document-sections ()
  (--map (org-ml-get-property :raw-value it) (org-ml-parse-subtrees 'all)))

(defun add-new-subsection (section subtitle content)
  (save-excursion
    (goto-char 0)
    (re-search-forward (s-lex-format "^* ${section}"))
    (org-insert-subheading (point))
    (insert subtitle)
    (org-newline-and-indent)
    (insert content)
    (org-id-get-create)))
#+end_src

#+RESULTS:
: add-new-subsection


#+begin_src emacs-lisp
(defun cthulhu-new-thing-and-make-link (type)
  (interactive "P")
  (let* ((type (if (not type) (completing-read "Sélection ?" (get-document-sections))
		 type))
	 (thing (read-from-minibuffer (s-lex-format "${type} à ajouter ?")))
	 (desc (read-from-minibuffer "Description"))
	 (id (add-new-subsection type thing desc)))
    (org-insert-link nil (concat "id:" id) thing)))

(defun make-adders (cthulhu-sections)
  (--map (let* ((type it)
                (fun-name (concat "cthulhu-new-" type "-and-make-link")))
           (defalias (intern fun-name) `(lambda () (interactive) (cthulhu-new-thing-and-make-link ,type))))
         cthulhu-sections))

(make-adders cthulhu-sections)
#+end_src

#+RESULTS:
| cthulhu-new-Objets-and-make-link | cthulhu-new-Personnages-and-make-link | cthulhu-new-Monstres-and-make-link | cthulhu-new-Lieux-and-make-link | cthulhu-new-Événements-and-make-link | cthulhu-new-Documentation-and-make-link |

* Manipulation d'un personnage
** Récupérer la section de ses tables 


#+RESULTS:
| cthulhu-personnages-liste-update | efs/org-babel-tangle-config | rmail-after-save-hook | latex-auto-save | doom-modeline-update-vcs-text | doom-modeline-update-vcs-icon | doom-modeline-update-buffer-file-name |

#+begin_src emacs-lisp :tangle org-cthulhu.el 
(defun cthulhu-select-character (&optional personnage-name prompt-info)
  "Renvoie un personnage du buffer courant"
  (let ((personnage-name (if (not personnage-name)
                             (completing-read (concat "Sélectionner un personnage: " prompt-info) (get-characters-name) nil t)
                           personnage-name)))
    (car (--filter (string= (get-name it) personnage-name) cthulhu-personnages-liste))))

(defun cthulhu-get-tables (personnage)
  "Récupère la section des tables d'un personnage donné"
  (car (--filter (string= (org-ml-get-property :raw-value it) "Tables") (org-ml-get-children personnage))))
#+end_src

#+RESULTS:
: cthulhu-get-tables

** Récupérer ses caractéristiques à partir d'une table 
*** Utilitaires sur les tables 

#+begin_src emacs-lisp :tangle org-cthulhu.el 
(defun get-table-column (table n)
  (let ((rows-num (length (org-ml-get-children table))))
    (loop for i from 0 to (- rows-num 1)
          collect (org-ml-get-children (org-ml-table-get-cell i n table)))))

(defun get-caracteristics-from (table)
  "Les caractéristiques sont les valeurs en première colonne de la table"
  (-map #'car (get-table-column table 0)))
  ;; (-map #'org-ml-get-children (get-table-column table 0)))

(defun get-caracteristics-values-from (table)
  "Les valeurs sont les valeurs en seconde colonne de la table"
  (-map #'car (get-table-column table 1)))
  ;; (-map #'org-ml-get-children (get-table-column table 1)))
#+end_src

#+RESULTS:
: get-caracteristics-values-from

*** Liste des caractéristiques d'un personnage 

#+begin_src emacs-lisp :tangle org-cthulhu.el 
(defun get-character-caracteristics-names (personnage)
  (let* ((carac-tables (org-ml-match '(:any * table) personnage))
         (carac (-map #'get-caracteristics-from carac-tables)))
    (apply #'-concat carac)))

(defun get-character-caracteristics-values (personnage)
  (let* ((carac-tables (org-ml-match '(:any * table) personnage))
         (carac (-map #'get-caracteristics-values-from carac-tables)))
    (apply #'-concat carac)))

(defun get-character-info (personnage)
  (let* ((carac-name (get-character-caracteristics-names personnage))
         (carac-value (get-character-caracteristics-values personnage))
         (normalize-str (lambda (str) (if str (substring-no-properties str) ""))))
   (--zip-with (cons (normalize-str it) (normalize-str other)) carac-name carac-value)))
#+end_src

#+RESULTS:
: get-character-info

#+begin_src emacs-lisp :tangle org-cthulhu.el
(defun get-carac (personnage carac-name)
  "carac : carac-name [str] . carac-value [str]"
  (assoc carac-name (get-character-info personnage)))

(defun carac-to-string (carac)
  (let ((carac-name (car carac))
        (carac-value (carac-value carac)))
    (substring-no-properties (format "%s : %s [maj. %s/ext. %s]" carac-name carac-value (majeur carac-value) (extreme carac-value)))))

(defun carac-value (carac)
  "A number representing the caracteristic value
Impact : roll the dice "
  (cond
   ((string-match-p "Impact" (car carac)) (roll-from-string (cdr carac)))
   (t (string-to-number (cdr carac)))))

(defun get-carac-value (personnage carac-name)
  (carac-value (get-carac personnage carac-name)))

(defun select-get-carac (personnage)
  (get-carac-value personnage
                   (completing-read "Sélectionner une  caractéristique: " (get-character-info personnage) nil t)))

;; (select-get-carac (cthulhu-select-character personnages-subtrees))
;; (get-carac-value (cthulhu-select-character personnages-subtrees) "POU")
#+end_src

#+RESULTS:
: select-get-carac

** Modifier une caractéristique 

#+begin_src emacs-lisp
(defun cthulhu-set-carac (personnage carac calc-new-carac)
  (let* ((tables (cthulhu-get-tables personnage))
         (beg (org-ml-get-property :begin tables))
         (end (org-ml-get-property :end tables))
         (val (get-carac-value personnage carac))
         (v (apply calc-new-carac (list val)))
         (m (majeur v))
         (e (extreme v))
         (new-line (s-lex-format "| ${carac} | ${v} | ${m} | ${e} |")))
    (save-excursion
      (goto-char beg)
      (re-search-forward (s-lex-format "^.*${carac}.*$"))
      (replace-match new-line)
      (org-table-align)
      (save-buffer))
    v))

(defun cthulhu-select-set-carac (new-value)
  (interactive "PValeur de la caractéristique ? ")
  (let* ((personnage (cthulhu-select-character))
         (carac (completing-read "Sélectionner une  caractéristique: " (get-character-info personnage) nil t))
         (old-value (get-carac-value personnage carac))
         (mod (if (not mod)
                  (string-to-number (read-from-minibuffer "Valeur de la caractéristique : "))
                mod))
         (calc-new-carac (lambda (val) new-value)))
    (cthulhu-set-carac personnage carac calc-new-carac)
    (message (format "%s : %s -> %s" carac old-value new-value))))

(defun cthulhu-select-mod-carac (mod)
  (interactive "PModification à apporter ? ")
  (let* ((personnage (cthulhu-select-character))
         (carac (completing-read "Sélectionner une  caractéristique: " (get-character-info personnage) nil t))
         (mod (if (not mod)
                  (string-to-number (read-from-minibuffer "Modification à apporter : "))
                mod))
         (old-value (get-carac-value personnage carac))
         (calc-new-carac (lambda (val) (+ val mod)))
         (new-value (cthulhu-set-carac personnage carac calc-new-carac)))
    (message (format "%s : %s -> %s" carac old-value new-value))))
#+end_src

#+RESULTS:
: cthulhu-select-mod-carac

* Système de jeu
** Caractéristiques dérivées

Page 35 manuel du gardien.

#+begin_src emacs-lisp
(defun impact (fortai)
  (cond
   ((< fortai 64) "-2")
   ((< fortai 84) "-1")
   ((< fortai 124) "0")
   ((< fortai 164) "1D4")
   ((< fortai 204) "1D6")
   ((< fortai 284) "2D6")
   ((< fortai 364) "3D6")
   ((< fortai 444) "4D6")
   ((< fortai 524) "5D6")
   (t "6D6")))

(defun carrure (fortai)
  (cond
   ((< fortai 64) "-2")
   ((< fortai 84) "-1")
   ((< fortai 124) "0")
   ((< fortai 164) "1")
   ((< fortai 204) "2")
   ((< fortai 284) "3")
   ((< fortai 364) "4")
   ((< fortai 444) "5")
   ((< fortai 524) "6")
   (t "100")))
#+end_src

#+RESULTS:
: carrure

** Types de réussites

#+begin_src emacs-lisp
(defun majeur (carac)
  (round (/ carac 2)))
(defun extreme (carac)
  (round (/ carac 5)))
#+end_src

#+RESULTS:
: extreme

#+begin_src emacs-lisp
(defvar success-types
  '(("Maladresse" . 5)
    ("Échec" . 4)
    ("Réussite normale" . 3)
    ("Réussite majeure" . 2)
    ("Réussite extrême" . 1)
    ("Réussite critique" . 0)))

(defun ask-success-type (&optional prompt)
  (cdr (assoc (completing-read (concat "Type de réussite" prompt) success-types) success-types)))

(defun get-success (out)
  (car (rassq out success-types)))

(defun roll-success (roll comp)
  (cond
   ((= roll 100) 5)
   ((and (< comp 50) (> roll 95)) 5)
   ((> roll comp) 4)
   ((<= roll 1) 0)
   ((<= roll (extreme comp)) 1)
   ((<= roll (majeur comp)) 2)
   ((<= roll comp) 3)))
#+end_src

#+RESULTS:
: roll-success

** Tests de caractéristique


#+begin_src emacs-lisp :tangle org-cthulhu.el
(defun roll100 (&optional modif)
  "Lance un dé 100 avec des dés bonus/malus "
  (if (not modif)
      (random 100)
  (let* ((choose-dice-fun (if (< 0 modif) #'min #'max))
         (dizaines-chiffre (apply choose-dice-fun
                                  (loop for i below (1+ (abs modif))
                                        collect (random 10))))
         (unités-chiffre (random 10)))
    (+ unités-chiffre (* dizaines-chiffre 10))))))
    ;; (format "%d%d" dizaines-chiffre unités-chiffre)))

(defun roll (Ds F &optional modif)
  "Renvoie une liste de lancés de dés. "
  (if (= F 100)
      (loop for i below Ds
	    collect (roll100 modif))
    (loop for i below Ds
	  collect (1+ (random F)))))
#+end_src

#+RESULTS:
: roll100

#+begin_src emacs-lisp
(defun select-roll-character-carac (&optional modif)
  (interactive)
  (let* ((perso (cthulhu-select-character))
         (carac (select-get-carac perso))
         (roll (roll100 modif))
         (out (roll-success roll carac)))
    (message (format "%d [%d, %d, %d] : %s" roll carac (majeur carac) (extreme carac) (get-success out)))))

(select-roll-character-carac)
#+end_src

#+RESULTS:
: 50 [0, 0, 0] : Échec

** Tests opposés

#+begin_src emacs-lisp

(defun cthulhu-test-opposé (&optional success1)
  (interactive "P")
  (let* ((perso1 (cthulhu-select-character))
         (out1 (if success1
                   (ask-success-type)
                 (roll-success (roll100) (select-get-carac perso1))))
         (perso2 (cthulhu-select-character))
         (comp2 (select-get-carac perso2))
         (out2 (roll-success (roll100) comp2)))
    (message 
    (cond
     ((< out1 out2) (format "Succès de %s (%s vs %s)"
                                     (get-name perso1) (get-success out1) (get-success out2)))
     ((< out2 out1) (format "Succès de %s (%s vs %s)"
                                     (get-name perso2) (get-success out2) (get-success out1)))
     (t "Pas de succès"))))))
#+end_src

#+RESULTS:
: cthulhu-test-opposé


#+begin_src emacs-lisp
(cthulhu-test-opposé)
#+end_src

#+RESULTS:
: Pas de succès

** Armes
*** Représentation des armes 

#+begin_src emacs-lisp
(defvar weapons-list 
  '(("Arbalète" "Arcs" "1D8+2" t 50 0.5 nil 96)
    ("Hache" "Haches" "1D8+2" t nil 1 nil nil)
    ("Luger" "Armes de poing" "1D10" t 15 1 8 99)
    ("IMI Desert Eagle" "Armes de poing" "3D10+2D6+3+Imp/2" t 15 1 7 94)
    ("Torche" "Corps à corps" "1D6+Feu" nil 1 nil nil)
    ("Automatique cal. 38" "Armes de poing" "1D10" t 15 1 '(6 5) 99))
  "Nom Compétence Dégats Empalement Portée Cadence Capacité Panne")

(defun failurep (weapon roll)
  (> (nth 8 weaon) roll))

(defun range-weaponp (weapon)
  "Renvoie la portée d'une arme si celle-ci est une arme à distance,
sinon. "
  (nth 5 weapon))

(defun impale-weaponp (weapon)
  "Détermine si l'arme weapon est capable de dégâts d'empalement."
  (nth 4 weapon))

(defun weapon-to-string (weapon)
  (let ((name (nth 0 weapon))
	(degats (nth 2 weapon))
	(empalement (nth 3 weapon)))
    (format "%s (%s) %s" name degats (if empalement "[E]" " "))))

(defun select-weapon ()
  (assoc (completing-read "Arme" weapons-list) weapons-list))

;; (weapon-to-string (select-weapon))
#+end_src

#+RESULTS:
: select-weapon

*** Roll weapon

# Pourquoi pas mais peu élégant
# #+begin_src emacs-lisp
# (defun weapon-get-damage-from-string (weapon)
#   (let* ((damages (nth 2 weapon))
#          (rolls (cl-loop while (string-match "\\([[:digit:]]\\)D\\([[:digit:]]\\{0,2\\}\\)\\+\?" damages)
# 			 collect (list (string-to-number (match-string 1 damages))
#                                        (string-to-number (match-string 2 damages)))
#                          ;; sum (apply #'+ (roll (string-to-number (match-string 1 damages))
#                          ;;                      (string-to-number (match-string 2 damages))))
#                          do (setq damages (replace-match "" nil nil damages))))
#          (cte (if (string-match "\\([[:digit:]]\\)" damages)
#                   (string-to-number (match-string 0 damages))))
#          (impact (string-match "Imp" damages)))
#     (list rolls cte impact)))
# #+end_src


#+begin_src emacs-lisp
(defun roll-from-string (str)
  (cond
   ((string-match "\\([[:digit:]]\\)D\\([[:digit:]]\\{0,2\\}\\)\\+\?" str) (apply #'+ (roll (string-to-number (match-string 1 str))
                                                                                            (string-to-number (match-string 2 str)))) )
   (t (string-to-number str))))

(defun roll-max-from-string (str)
  (cond
   ((string-match "\\([[:digit:]]\\)D\\([[:digit:]]\\{0,2\\}\\)\\+\?" str) (+ (* (string-to-number (match-string 1 str))
                                                                                 (string-to-number (match-string 2 str)))) )
   (t (string-to-number str))))

(defun weapon-get-damage (weapon imp)
  (let ((rolls (split-string (nth 2 weapon) "+"))
        (imp-damage (roll-from-string imp)))
    (apply #'+
           (--map (if (string-match "Imp" it)
                      (string-to-number (calc-eval (replace-match (number-to-string imp-damage) nil nil it)))
                    (roll-from-string it))
                  rolls))))

(defun weapon-get-max-damage (weapon imp)
  (let ((rolls (split-string (nth 2 weapon) "+"))
        (imp-damage (roll-max-from-string imp)))
    (apply #'+
           (--map (if (string-match "Imp" it)
                      (string-to-number (calc-eval (replace-match (number-to-string imp-damage) nil nil it)))
                    (roll-max-from-string it))
                  rolls))))

(defun weapon-get-impalement-damage (weapon imp)
  (+ (weapon-get-damage weapon imp)
     (weapon-get-max-damage weapon imp)))

;; (weapon-get-max-damage-from-string (select-weapon) "1D5")
#+end_src

#+RESULTS:
: weapon-get-impalement-damage

* Gestion des personnages
** Initialiser les caractéristiques dérivées

#+begin_src emacs-lisp
(defun calcule-dérivées (personnage)
  (let ((imp (impact (+ (get-carac-value personnage "FOR") (get-carac-value personnage "TAI"))))
        (carr (carrure (+ (get-carac-value personnage "FOR") (get-carac-value personnage "TAI"))))
        (esq (/ (get-carac-value personnage "DEX") 2))
        (san (get-carac-value personnage "POU"))
        (langue (get-carac-value personnage "EDU"))
        (pm (/ (get-carac-value personnage "POU") 5))
	(langue ())
        (pdv (/ (+ (get-carac-value personnage "CON") (get-carac-value personnage "TAI")) 10)))
    `(("Impact" . ,(format "| -- Impact | %s |  |  |" imp))
      ("Carrure" . ,(format "| -- Carrure | %s |  |  |" carr))
      ("Esquive" . ,(format "| Esquive | %s | %s | %s |" esq (majeur esq) (extreme esq)))
      ("Langue maternelle" . ,(format "| Langue maternelle | %s | %s | %s |" langue (majeur langue) (extreme langue)))
      ("Santé mentale" . ,(format "| Santé mentale | %s | %s | %s |" san (majeur san) (extreme san)))
      ("Points de magie" . ,(format "| Points de magie | %s |  |  |" pm))
      ("Points de vie" . ,(format "| Points de vie | %s |  |  |" pdv))
      )))

(defun init-tables (personnage)
  (let* ((tables (cthulhu-get-tables personnage))
         (beg (org-ml-get-property :begin tables))
         (end (org-ml-get-property :end tables))
         (pdv (/ (+ (get-carac-value personnage "CON") (get-carac-value personnage "TAI")) 10))
         (new-line (s-lex-format "| Points de vie | ${pdv} |  |  |")))
    (save-excursion
      (cl-loop for (carac-name . new-line) in (calcule-dérivées personnage) do
               (goto-char beg)
               (re-search-forward (s-lex-format "^.*${carac-name}.*$"))
               (replace-match new-line)
               (org-table-align)))))

(defun cthulhu-select-init ()
  (interactive)
  (init-tables (cthulhu-select-character)))
#+end_src

#+RESULTS:
: cthulhu-select-init

* TODO Gestion d'un combat

- classer les personnages par ordre décroissant de dextérité
  - ajouter un personnage qui rejoint la mêlée
- choisir une arme ?
- corps à corps :
  - règle du sous-nombre : nombre d'attaques par tour !
  - ~cthulhu-fight-fight-back perso1 perso2~ la cible rend les coups
  - ~cthulhu-fight-dodge perso1 perso2~ la cible esquive
  - ~cthulhu-fight-damage weapon~ 
  - ~cthulhu-fight-manoeuvre~
- dégâts :
  - empalement
- ~cthulhu-fight-next-round~
    

** Variables utiles

#+begin_src emacs-lisp
(defvar combat-mode-rows
  '("Points de vie" 
    "Protection"  
    "Attaques" 
    "Coups rendus" 
    "Blessure grave" 
    "Mourant"
    "Inconscient"
    "Folie"))         

(defvar combat-options
  '("Esquiver"
    "Rendre les coups"
    "Manœuvre"))

(defun cthulhu-fight-get-current-fighters ()
  (let* ((table (org-ml-parse-this-table-row))
         (row (org-table-current-line))
         (col (org-table-current-column))
         (maxcol (length (org-ml-get-children table)))
         (maxrow (1+ (length combat-mode-rows))))
    (save-excursion 
      (org-table-goto-column 1)
      (org-table-goto-line 1)
      (cl-loop for i from 2 to maxcol
               do (org-table-goto-column i)
               collect (string-trim (substring-no-properties (org-table-get-field)))))))
#+end_src

#+RESULTS:
: cthulhu-fight-get-current-fighters

** Nouveau tableau de combat

#+begin_src emacs-lisp
(defun build-column (rows personnage-name)
  (cons personnage-name
        (loop for row-name in rows
              collect (let ((carac (get-carac (cthulhu-select-character personnage-name) row-name)))
                        (if (not carac)
                            ""
                          (number-to-string (carac-value carac)))))))

(defun cthulhu-fight-new-fight (fighters-list)
  "Créer un tableau afin de suivre le combat entre les participants
présents dans fighters-list."
  (let* ((fighters-listo (--sort (> (get-carac-value it "DEX") (get-carac-value other "DEX")) fighters-list))
         (fighters-name (--map (get-name it) fighters-listo)))
    (cons (cons "Personnages" combat-mode-rows)
          (loop for fname in fighters-name
                collect (build-column combat-mode-rows fname)))))

(defun cthulhu-fight-new-fight-select-insert (num)
  "Sélectionne num participants et créé le tableau correspondant "
  (save-excursion 
    (insert (org-ml-to-trimmed-string (apply #'org-ml-build-table!
                                             (cthulhu-fight-new-fight (loop for i from 1 to num
                                                                            collect (cthulhu-select-character nil (format " %s/%s " i num))))))))
  (org-table-transpose-table-at-point)
  (org-table-insert-hline)
  (org-table-insert-hline t))

#+end_src

#+RESULTS:
: cthulhu-fight-new-fight-select-insert

#+begin_src emacs-lisp
(append '((1 2)) '((3 4) (5 6))))
#+end_src

#+RESULTS:
| 1 | 2 |
| 3 | 4 |
| 5 | 6 |



** Modification des états de combat

#+begin_src emacs-lisp
(defun cthulhu-fight-inflict-major-wound (victime-name)
  "Ajoute un marqueur de blessure majeure sur la victime-name"
  (let* ((party (cthulhu-fight-get-current-fighters))
         (col (+ 2 (position victime-name party :test #'string=)))
         (row (+ 2 (position "Blessure grave" combat-mode-rows :test #'string=))))
    (save-excursion
      (org-table-goto-line row)
      (org-table-goto-column col)
      (org-table-blank-field)
      (insert "t")
      (org-table-align))))

(defun cthulhu-fight-fight-back-dodge (victime-name)
  "Incrémente le compteur de ripostes au CaC de la victime-name"
  (let* ((party (cthulhu-fight-get-current-fighters))
         (col (+ 2 (position victime-name party :test #'string=)))
         (row (+ 2 (position "Coups rendus" combat-mode-rows :test #'string=))))
    (save-excursion
      (org-table-goto-line row)
      (org-table-goto-column col)
      (insert (number-to-string (1+ (string-to-number (org-table-blank-field)))))
      (org-table-align))))
#+end_src

#+RESULTS:
: cthulhu-fight-fight-back-dodge



** Infliger des dommages à une cible

On peut améliorer les prompts

#+begin_src emacs-lisp
;; Remplacer "18" par : (get-carac-value victime "Points de vie") 
;; Une vie de -100 est un état mort
(defun cthulhu-fight-inflict-damage (victime-name)
  "Met à jour les pdvs et les états de la victime-name en lui infligeant un montant de dégâts"
  (let* ((party (cthulhu-fight-get-current-fighters))
         ;; (victime-name (completing-read "Cible de l'attaque : " party))
         (col (+ 2 (position victime-name party :test #'string=)))
         (row (+ 2 (position "Points de vie" combat-mode-rows :test #'string=)))
         (degats (eval-minibuffer "Dégâts infligés : " )))
    (save-excursion
      (org-table-goto-line row)
      (org-table-goto-column col)
      (let* ((current-health (string-to-number (org-table-blank-field)))
             (new-health (- current-health degats)))
        (cond
         ((> degats (get-carac-value (cthulhu-select-character victime-name) "Points de vie"))
          (setq new-health -100))
         ((> degats (/ (get-carac-value (cthulhu-select-character victime-name) "Points de vie") 2))
          (cthulhu-fight-inflict-major-wound victime-name)))
        (insert (number-to-string new-health)))
      (org-table-align))))
#+end_src

#+RESULTS:
: cthulhu-fight-inflict-damage

#+end_src


** Attaquer une cible

#+begin_src emacs-lisp
(defun cthulhu-fight-attack-brawl (&optional victime)
  (let* ((attaquant-name (string-trim (substring-no-properties (org-table-get-field))))
         (victime-name (completing-read "Choix de la victime ? " (cthulhu-fight-get-current-fighters)))
         (def (completing-read "Choix de la riposte ? " combat-options))
         (carac "Corps à corps")
         (acarac (get-carac (cthulhu-select-character attaquant-name) carac))
         (vcarac (get-carac (cthulhu-select-character victime-name) carac))
         ;; (acarac (get-carac-value attaquant "Corps à corps"))
         ;; (vcarac (get-carac-value victime "Corps à corps"))
         )
    (cond
     ((string= def "Esquiver") (dodge-fun
                                victime-name
                                (roll-success (ask-roll-result attaquant-name acarac) (carac-value acarac))
                                (roll-success (ask-roll-result victime-name vcarac) (carac-value vcarac))
                                ))
     ((string= def "Rendre les coups") (fight-back-fun
                                        victime-name
                                        (roll-success (ask-roll-result attaquant-name acarac) (carac-value acarac))
                                        (roll-success (ask-roll-result victime-name vcarac) (carac-value vcarac))))
     (t nil))))

(defun ask-roll-result (perso-name carac)
  (eval-minibuffer (format "Lancer pour %s. %s "
			   perso-name
			   (carac-to-string carac))))

(defun dodge-fun (victime-name asuccess vsuccess)
  (if (< asuccess vsuccess) (cthulhu-fight-inflict-damage victime-name))
  (cthulhu-fight-fight-back-dodge victime-name))

(defun fight-back-fun (victime-name asuccess vsuccess)
  (if (<= asuccess vsuccess) (cthulhu-fight-inflict-damage victime-name))
  (cthulhu-fight-fight-back-dodge victime-name))
#+end_src

#+RESULTS:
: fight-back-fun



* Personnages tests                                              :personnage:
** Bobby Watson : un fameux concierge                           
*** En bref 

3 lignes rapidement *lisibles *.

*** Histoire

Lore. 

Particularités :
- description ::
- traits de caractère :: 
- idéologies et croyances :: 
- personnes importantes :: 
- lieu important :: 
- possessions importantes :: 
- phobies et manies :: 

*** Équipement et possessions

- items :: divers
- Armes de poing :: Derringer calibre 25 (1D6) 
- Fusils :: Carabine (2D6)  
- Mitraillettes :: Thompson (1D10 + 2) 

*** Tables
**** Caractéristiques 

#+TBLNAME: carac
| FOR | 84 | 42 | 16 |
| CON | 60 | 30 | 12 |
| TAI | 70 | 25 | 10 |
| DEX | 70 | 35 | 14 |
| INT | 50 | 25 | 10 |
| APP | 50 | 25 | 10 |
| POU | 55 | 27 | 11 |
| EDU | 10 |  5 |  2 |
| AGE | 49 | 24 |  9 |
#+TBLFM: $3=round($2/2)::$4=round($2/5)

**** Santé physique et psychique

| Santé mentale   | 80 | 40 | 16 |
| Points de vie   | 13 |    |    |
| Points de magie | 16 |    |    |
| Chance          |    |  0 |  0 |
#+TBLFM: $3=round($2/2)::$4=round($2/5)

**** Caractéristiques de combat

| Corps à corps (1D3)          |  25 | 13 | 5 |
| -- Carrure                   |   1 |    |   |
| -- Impact                    | 1D4 |    |   |
| Armes à feu (armes de poing) |  20 | 10 | 4 |
| Armes à feu (fusils)         |  25 | 13 | 5 |
| Armes à feu (mitraillettes)  |  15 |  8 | 3 |
| -- Esquive                   |  35 | 17 | 7 |
#+TBLFM: $3=round($2/2)::$4=round($2/5)

**** Compétences
***** Sociales

| Baratin      |  5 | 3 | 1 |
| Charme       | 15 | 8 | 3 |
| Intimidation | 15 | 8 | 3 |
| Persuasion   | 10 | 5 | 2 |
| Psychologie  | 10 | 5 | 2 |
#+TBLFM: $3=round($2/2)::$4=round($2/5)

***** Se repérer

| Bibliothèque        | 20 | 10 | 4 |
| Orientation         | 10 |  5 | 2 |
| Pister              | 10 |  5 | 2 |
| Trouver objet caché | 25 | 13 | 5 |
#+TBLFM: $3=round($2/2)::$4=round($2/5)

***** Cthulhu

| Occultisme | 5 | 3 | 1 |
| Mythos     | 0 | 0 | 0 |
#+TBLFM: $3=round($2/2)::$4=round($2/5)

***** Soins

| Premier soins | 30 | 15 | 6 |
| Médecine      |  1 |  1 | 0 |
| Psychanalyse  |  1 |  1 | 0 |
#+TBLFM: $3=round($2/2)::$4=round($2/5)

***** Se déplacer

| Conduite   | 20 | 10 | 4 |
| Grimper    | 20 | 10 | 4 |
| Lancer     | 20 | 10 | 4 |
| Nager      | 20 | 10 | 4 |
| Pilotage   |  1 |  1 | 0 |
| Sauter     | 20 | 10 | 4 |
| Survie     | 10 |  5 | 2 |
| Écouter    | 20 | 10 | 4 |
| Équitation |  5 |  3 | 1 |
#+TBLFM: $3=round($2/2)::$4=round($2/5)

***** Filouterie

| Discrétion | 20 | 10 | 4 |
| Imposture  |  5 |  3 | 1 |
| Crochetage |  1 |  1 | 0 |
| Pickpocket | 10 |  5 | 2 |
#+TBLFM: $3=round($2/2)::$4=round($2/5)

***** Connaissances théoriques

| Anthropologie     |   1 |              1 |              0 |
| Archéologie       |   1 |              1 |              0 |
| Arts et métiers   |     |              0 |              0 |
| Droit | 555 | 277 | 111 |
| Histoire          |   5 |              3 |              1 |
| Langue maternelle | EDU | round(EDU / 2) | round(EDU / 5) |
| Langues (autre)   |   1 |              1 |              0 |
| Naturalisme       |  10 |              5 |              2 |
| Sciences          |   1 |              1 |              0 |
#+TBLFM: $3=round($2/2)::$4=round($2/5)

***** Connaissances techniques

| Mécanique   | 10 | 5 | 2 |
| Électricité | 10 | 5 | 2 |
#+TBLFM: $3=round($2/2)::$4=round($2/5)

***** Argent 

| Comptabilité | 5 | 3 | 1 |
| Crédit       | 0 | 0 | 0 |
| Estimation   | 5 | 3 | 1 |
#+TBLFM: $3=round($2/2)::$4=round($2/5)

** Ybbo Nostaw : cambrioleur 
*** En bref 

3 lignes rapidement lisibles.

*** Histoire

Lore. 

Particularités :
- description ::
- traits de caractère :: 
- idéologies et croyances :: 
- personnes importantes :: 
- lieu important :: 
- possessions importantes :: 
- phobies et manies :: 

*** Équipement et possessions

- items :: divers
- Armes de poing :: Derringer calibre 25 (1D6) 
- Fusils :: Carabine (2D6)  
- Mitraillettes :: Thompson (1D10 + 2) 

*** Tables
**** Caractéristiques 

| FOR |   |   |   |
| CON |   |   |   |
| TAI |   |   |   |
| DEX |   |   |   |
| INT |   |   |   |
| APP |   |   |   |
| POU |   |   |   |
| EDU |   |   |   |
#+TBLFM: $3=round($2/2)::$4=round($2/5)

**** Santé physique et psychique

| Santé mentale  |   |   |   |
| Points de vie  |   |   |   |
| Point de magie |   |   |   |
| Chance         |   |   |   |
#+TBLFM: $3=round($2/2)::$4=round($2/5)

**** Caractéristiques de combat

| Corps à corps (1D3)          |   |   |   |
| -- Carrure                   |   |   |   |
| Armes à feu (armes de poing) |   |   |   |
| Armes à feu (fusils)         |   |   |   |
| Armes à feu (mitraillettes)  |   |   |   |
| Esquive                      |   |   |   |
#+TBLFM: $3=round($2/2)::$4=round($2/5)

**** Compétences
***** Sociales

| Baratin      |   |   |   |
| Charme       |   |   |   |
| Intimidation |   |   |   |
| Persuasion   |   |   |   |
| Psychologie  |   |   |   |
#+TBLFM: $3=round($2/2)::$4=round($2/5)

***** Se repérer

| Bibliothèque        |   |   |   |
| Orientation         |   |   |   |
| Pister              |   |   |   |
| Trouver objet caché |   |   |   |
#+TBLFM: $3=round($2/2)::$4=round($2/5)

***** Cthulhu

| Occultisme |   |   |   |
| Mythos     |   |   |   |
#+TBLFM: $3=round($2/2)::$4=round($2/5)

***** Soins

| Premier soins |   |   |   |
| Médecine      |   |   |   |
| Psychanalyse  |   |   |   |
#+TBLFM: $3=round($2/2)::$4=round($2/5)

***** Se déplacer

| Écouter    |   |   |   |
| Conduite   |   |   |   |
| Équitation |   |   |   |
| Survie     |   |   |   |
| Pilotage   |   |   |   |
| Grimper    |   |   |   |
| Nager      |   |   |   |
| Lancer     |   |   |   |
| Sauter     |   |   |   |
#+TBLFM: $3=round($2/2)::$4=round($2/5)

***** Filouterie

| Discrétion |   |   |   |
| Imposture  |   |   |   |
| Crochetage |   |   |   |
| Pickpocket |   |   |   |
#+TBLFM: $3=round($2/2)::$4=round($2/5)

***** Connaissances théoriques

| Anthropologie              |   |   |   |
| Sciences                   |   |   |   |
| Archéologie                |   |   |   |
| Histoire                   |   |   |   |
| Arts et métiers (cuisiner) |   |   |   |
| Naturalisme                |   |   |   |
| Langue maternelle          |   |   |   |
| Droit                      |   |   |   |
| Langues (grec)             |   |   |   |
#+TBLFM: $3=round($2/2)::$4=round($2/5)

***** Connaissances techniques

| Mécanique                  |     |     |     |
| Électricité                |     |     |     |
#+TBLFM: $3=round($2/2)::$4=round($2/5)

***** Argent 

| Comptabilité |   |   |   |
| Crédit       |   |   |   |
| Estimation   |   |   |   |
#+TBLFM: $3=round($2/2)::$4=round($2/5)

* Monstres tests                                                 :personnage:
** La goule
*** En bref 

3 lignes rapidement lisibles.

*** Histoire

Lore. 

Particularités :
- description ::
- traits de caractère :: 
- idéologies et croyances :: 
- personnes importantes :: 
- lieu important :: 
- possessions importantes :: 
- phobies et manies :: 

*** Équipement et possessions

- items :: divers
- Armes de poing :: Derringer calibre 25 (1D6) 
- Fusils :: Carabine (2D6)  
- Mitraillettes :: Thompson (1D10 + 2) 

*** Tables
**** Caractéristiques 

| FOR | 70 | 35 | 14 |
| CON |    |    |    |
| TAI |    |    |    |
| DEX |    |    |    |
| INT |    |    |    |
| APP |    |    |    |
| POU |    |    |    |
| EDU |    |    |    |
#+TBLFM: $3=round($2/2)::$4=round($2/5)

**** Santé physique et psychique

| Santé mentale  |   |   |   |
| Points de vie  |   |   |   |
| Point de magie |   |   |   |
| Chance         |   |   |   |
#+TBLFM: $3=round($2/2)::$4=round($2/5)

**** Caractéristiques de combat

| Corps à corps (1D3)          |   |   |   |
| -- Carrure                   |   |   |   |
| Armes à feu (armes de poing) |   |   |   |
| Armes à feu (fusils)         |   |   |   |
| Armes à feu (mitraillettes)  |   |   |   |
| Esquive                      |   |   |   |
#+TBLFM: $3=round($2/2)::$4=round($2/5)

**** Compétences
***** Sociales

| Baratin      |   |   |   |
| Charme       |   |   |   |
| Intimidation |   |   |   |
| Persuasion   |   |   |   |
| Psychologie  |   |   |   |
#+TBLFM: $3=round($2/2)::$4=round($2/5)

***** Se repérer

| Bibliothèque        |   |   |   |
| Orientation         |   |   |   |
| Pister              |   |   |   |
| Trouver objet caché |   |   |   |
#+TBLFM: $3=round($2/2)::$4=round($2/5)

***** Cthulhu

| Occultisme |   |   |   |
| Mythos     |   |   |   |
#+TBLFM: $3=round($2/2)::$4=round($2/5)

***** Soins

| Premier soins |   |   |   |
| Médecine      |   |   |   |
| Psychanalyse  |   |   |   |
#+TBLFM: $3=round($2/2)::$4=round($2/5)

***** Se déplacer

| Écouter    |   |   |   |
| Conduite   |   |   |   |
| Équitation |   |   |   |
| Survie     |   |   |   |
| Pilotage   |   |   |   |
| Grimper    |   |   |   |
| Nager      |   |   |   |
| Lancer     |   |   |   |
| Sauter     |   |   |   |
#+TBLFM: $3=round($2/2)::$4=round($2/5)

***** Filouterie

| Discrétion |   |   |   |
| Imposture  |   |   |   |
| Crochetage |   |   |   |
| Pickpocket |   |   |   |
#+TBLFM: $3=round($2/2)::$4=round($2/5)

***** Connaissances théoriques

| Anthropologie              |   |   |   |
| Sciences                   |   |   |   |
| Archéologie                |   |   |   |
| Histoire                   |   |   |   |
| Arts et métiers (cuisiner) |   |   |   |
| Naturalisme                |   |   |   |
| Langue maternelle          |   |   |   |
| Droit                      |   |   |   |
| Langues (grec)             |   |   |   |
#+TBLFM: $3=round($2/2)::$4=round($2/5)

***** Connaissances techniques

| Mécanique                  |     |     |     |
| Électricité                |     |     |     |
#+TBLFM: $3=round($2/2)::$4=round($2/5)

***** Argent 

| Comptabilité |   |   |   |
| Crédit       |   |   |   |
| Estimation   |   |   |   |
#+TBLFM: $3=round($2/2)::$4=round($2/5)


